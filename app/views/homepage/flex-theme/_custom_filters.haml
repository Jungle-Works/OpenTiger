
- filters.each_with_index do |field,index|
  - field.with_type do |type|
    - if [:dropdown, :checkbox].include?(type)
      
      .toggle-container.home-toolbar-toggle-container
        .toggle.with-borders{data: {toggle: '#home-toolbar-'+index.to_s+'-menu'}}
          .toggle-header-container
            .toggle-header
            = field.name(I18n.locale)
            -# = icon_tag("dropdown", ["icon-dropdown"])
        .toggle-menu.hidden{:id => 'home-toolbar-'+index.to_s+'-menu'}
          - make_scrollable = field.options.size > 10
          .custom-filter-options{:class => make_scrollable ? "scrollable" : ""}
            - field.options.sort.each do |option|
              .custom-filter-checkbox-container
                %a
                  %label.custom-filter-checkbox-label
                    - param_name = type == :dropdown ? CustomFieldSearchParams.dropdown_param_name(option.id) : CustomFieldSearchParams.checkbox_param_name(option.id)
                    = check_box_tag param_name, "#{option.id}", params[param_name]
                    %span.custom-filter-checkbox-label-text
                      = option.title(I18n.locale)
          .filter-action
            -options = field.options.map{|x|  type == :dropdown ? CustomFieldSearchParams.dropdown_param_name(x.id) : CustomFieldSearchParams.checkbox_param_name(x.id)}
            %button{ class: "clear-filter-button",type: 'submit', :onclick => "window.ST.clearFilter(#{options})"}
              = t("custom.clear")
            %div{:class=> "apply-cancel-btn"}
              %button{ class: "cancel-filter-button", type: 'button' , :onclick => "window.ST.cancelFilterCheckbox(#{options},`#{'home-toolbar-'+index.to_s+'-menu'}`)"}
                = t("custom.cancel")
              %button{type: 'submit', class: "apply-filter-button"}
                = t("custom.apply")
          -# .custom-filter-title
          -#   = field.name(I18n.locale)
          -# - make_scrollable = field.options.size > 10
          -# .custom-filter-options{:class => make_scrollable ? "scrollable" : ""}
          -#   - field.options.sort.each do |option|
          -#     .custom-filter-checkbox-container
          -#       %label.custom-filter-checkbox-label
          -#         - param_name = type == :dropdown ? CustomFieldSearchParams.dropdown_param_name(option.id) : CustomFieldSearchParams.checkbox_param_name(option.id)
          -#         = check_box_tag param_name, "#{option.id}", params[param_name]
          -#         %span.custom-filter-checkbox-label-text
          -#           = option.title(I18n.locale)

  - field.with(:numeric) do
    - min_param = CustomFieldSearchParams.numeric_min_param_name(field.id)
    - max_param = CustomFieldSearchParams.numeric_max_param_name(field.id)
    - min_value = params[min_param]
    - max_value = params[max_param]

    .toggle-container.home-toolbar-toggle-container.price-filter
      .toggle.with-borders{data: {toggle: '#home-toolbar-'+index.to_s+'-menu'}}
        .toggle-header-container
          .toggle-header
          = field.name(I18n.locale)
          -# = icon_tag("dropdown", ["icon-dropdown"])
          
      .toggle-menu.hidden{:id => 'home-toolbar-'+index.to_s+'-menu'}
        .custom-filter-options
          - id = ["range-slider", field.id].join("-")
          - range = [field.min, field.max]
          - start = [min_value || field.min, max_value || field.max]
          - labels = ["#custom-filter-min-value-#{id}", "#custom-filter-max-value-#{id}"]
          - fields = ["#nf_min_#{id}", "#nf_max_#{id}"]
          %div.num-range
            %span.num-range-text
              %span
                = t("custom.range")
            %div.num-min-max
              %input{ class: 'min-num-limit', type: 'number', name: min_param, id: "nf_min_#{id}", onkeydown:"window.ST.numberFilters.onKeyDownHandler(event)" , oninput:"window.ST.numberFilters.onInputHandler(event,#{range.to_json.html_safe},#{fields.to_json.html_safe},'#nf_min_#{id}','##{id}')",
              value: min_value, placeholder: field.min.to_i, min: field.min, max: field.max, step: "1"}
              %span.num-seperator
                = "-"
              %input{ class: 'max-num-limit', type: 'number', name: max_param, id: "nf_max_#{id}", onkeydown:"window.ST.numberFilters.onKeyDownHandler(event)" , oninput:"window.ST.numberFilters.onInputHandler(event,#{range.to_json.html_safe},#{fields.to_json.html_safe},'#nf_max_#{id}','##{id}')",
              value: max_value, placeholder: field.max.to_i, min: field.min, max: field.max, step: "1"}
          - id = ["range-slider", field.id].join("-")
          .range-slider{id: id}
            

            - content_for :extra_javascript do
              :javascript
                window.ST.rangeFilter("##{id}", #{range.to_json.html_safe}, #{start.to_json.html_safe}, #{labels.to_json.html_safe}, #{fields.to_json.html_safe}, #{field.allow_decimals})

        -# .row
        -#   .col-12
        -#     .left
        -#       %span.custom-filter-min-max-title= t(".min")
        -#       %span{id: "custom-filter-min-value-#{id}"}
        -#       %input{type: "hidden", id: "nf_min_#{id}", name: min_param, value: min_value}
        -#     .right
        -#       %span.custom-filter-min-max-title= t(".max")
        -#       %span{id: "custom-filter-max-value-#{id}"}
        -#       %input{type: "hidden", id: "nf_max_#{id}", name: max_param, value: max_value}
        .filter-action
          %button{class: "clear-filter-button", id: "clear-button", :type=> "submit", :onclick => "window.ST.clearNumberRangeFilter(`##{id}`)"}
            = t("custom.clear")
          %div{:class=> "apply-cancel-btn"}
            %button{ class: "cancel-filter-button", :type=> "button", :onclick => "window.ST.cancelNumberRangeFilter(`##{id}`)"}
              = t("custom.cancel")
            %button{type: 'submit', class: "apply-filter-button"}
              = t("custom.apply")
